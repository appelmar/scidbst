% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.R
\docType{methods}
\name{aggregate.t,scidbst-method}
\alias{aggreate.sp,scidbst}
\alias{aggregate}
\alias{aggregate,scidbst}
\alias{aggregate.sp,scidbst-method}
\alias{aggregate.t,scidbst}
\alias{aggregate.t,scidbst-method}
\title{Aggregates a scidbst object over given dimensions and/or attributes}
\usage{
\S4method{aggregate.t}{scidbst}(x, by, ...)

\S4method{aggregate.sp}{scidbst}(x, by, ...)

aggregate(x, by, FUN, window, variable_window)
}
\arguments{
\item{x}{A \code{scidbst} object.}

\item{by}{optional single character string or a list of array dimension and/or attribute names to group by;
or a \code{scidb} object to group by. Not required for \code{window} and grand aggregates.}

\item{FUN}{a character string representing a SciDB aggregation expression or a reduction function.}

\item{window}{optional, if specified, perform a moving window aggregate along the specified coordinate windows.}

\item{variable_window}{optional, if specified, perform a moving window aggregate over successive data values along the
coordinate dimension axis specified by \code{by}.}
}
\description{
Due to the fact that scidbst arrays can have dimensions that are referenced in space and/or time, this function
uses 'scidb's aggregate function for performing the aggregation itself and it manages the metadata information
about the references / extents and alike.
}
\details{
The scidbst package also provides functions to directly aggregate over space or time without the need to
specify the dimensions that need to be aggregated by.

\strong{Aggregate over space}

This function aggregates over space leaving a scidbst array without spatial dimensions. The spatial information will remain
on the R object. The spatial resolution will be increased to the whole spatial dimensions (one cell captures the whole image). And
the spatial extent will remain the same.

\strong{Aggregate over time}

This function aggregates a scidbst array for the temporal dimension. This means the resulting array will stripped from
the temporal dimension and the values on the temporal dimension will be aggregated.
}
\note{
The additional parameter like window and variable_window are passed to the original aggregate function from the
scidb package. However, the variable_window parameter was not tested.
}
\examples{
\dontrun{
# Using the pure aggregate method
scidbconnect(...)
scidbst.obj = scidbst("array1") #array with spatial and temporal dimension (x,y,t)
agg.1 = aggregate(x=scidbst.obj,by=list("y","x"),FUN="avg(band1)") # aggreagtes over time, result something similar to a raster
agg.2 = aggregate(x=scidbst.obj,by=list("t"),FUN="avg(band1)") # aggregate over space, result something like a time series
agg.3 = aggregate(x=scidbst.obj,by=list("y","x","t"),FUN=count) # count cells that are aggregated = total number of cells over all dimensions
}

\dontrun{
# Using aggregate over space
scidbst.obj = scidbst("array2")
aggt = aggregate.sp(scidbst.obj,FUN="avg(attribute1)") # returns something similar to a timeseries with aggregated values over the spatial dimension
}

\dontrun{
# Using aggregate over time
scidbst.obj = scidbst("array3")
aggt = aggregate.t(scidbst.obj,FUN="avg(attribute1)") # returns something similar to a raster with aggregated values over the temporal dimension
}
}

