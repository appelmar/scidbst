% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subarray.R
\docType{methods}
\name{subarray,scidbst}
\alias{subarray,scidbst}
\title{Subarray function for scidbst object}
\usage{
\S4method{subarray}{scidbst,numeric}(x, limits, between = FALSE)

\S4method{subarray}{scidbst,character}(x, limits, between = FALSE)

\S4method{subarray}{scidbst,Extent}(x, limits, between = FALSE)

\S4method{subarray}{scidbst,TemporalExtent}(x, limits, between = FALSE)
}
\arguments{
\item{x}{scidbst array object}

\item{limits}{vector of coordinate ranges or a character string (see Details) or Extent or TemporalExtent objects}

\item{between}{(logical) Whether or not the \code{between} function shall be used in scidb instead of \code{subarray}}
}
\value{
scidbst array object with modified dimension references
}
\description{
This function is based on the scidb subarray function. It will create a subset of the array based on the stated dimension limits. Based
on the 'between' flag in scidb will be used the AFL function 'subarray' or 'between'. When 'between is set \code{TRUE}, then the spatial
and/or temporal references will not be changed, because the dimension values are not recalculated. If 'subarray' is used in scidb, then
the dimension values are shifted to the new lower boundaries, which requires an adaption of the references (if necessary).
}
\details{
Like in the original \code{subarray} method \code{limits} parameter needs to be either a vector of numerics or characters or a character string. The vector needs to
have two times the number of dimension as elements in it. This also applies to the character string, which shall contain the limits
divided by commas (','). Examples: c(0,0,0,10,10,10); "0,0,0,10,10,10". Also unbounded dimension statements are supported. Use the
asterisk ('*') to define an unbounded dimension value.
The scidbst package also allows Extent and TemporalExtent objects as limits. Missing values regarding the spatial extent or temporal extent
are kept as is.
}
\note{
The package will provide this function as a generic S4 function. This means that the original subarray method from
the scidb package will not be recognized as S4 function. Use scidb::subarray to call the original method.
}
\examples{
\dontrun{
scidbconnect(...)
chicago = scidbst("chicago_sts")
expression = c(501,285,2,901,585,3) #minimum values, then maximum values for all dimensions
expression2 = c("501","285","2","901","585","*")
expression3 = "501,285,2,901,585,3"

chicago_sub = subarray(x=chicago,limits=expression,between=FALSE)
}

}
\seealso{
\code{\link[scidb]{subarray}}, \code{\link[scidbst]{crop,scidbst}}
}

